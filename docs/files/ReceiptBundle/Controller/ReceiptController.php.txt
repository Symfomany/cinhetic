<?php

namespace Ezap\ReceiptBundle\Controller;

use Ezap\ReceiptBundle\Form\SearchType;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;

use Ezap\ReceiptBundle\Entity\Receipt;
use Ezap\ReceiptBundle\Form\ReceiptType;

/**
 * Receipt controller.
 *
 */
class ReceiptController extends Controller
{

    /**
     * Lists all Receipt entities.
     *
     */
    public function indexAction()
    {
        $em = $this->getDoctrine()->getManager();

        $entities = $em->getRepository('EzapReceiptBundle:Receipt')->findAll();

        return $this->render('EzapReceiptBundle:Receipt:index.html.twig', array(
            'receipts' => $entities,
        ));
    }


    /**
     * Search Action
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function searchAction()
    {
        $request = $this->getRequest();
        $paginator = $this->get('knp_paginator');
        $word_arg = $request->query->get('word');
        $paginate_by_page = 5;
        $receipts = array();
        $finalword = null;

        if (!empty($word_arg))
            $finalword = $word_arg;

        /**
         * Finders
         */
        $finderReceipts = $this->container->get('fos_elastica.finder.website.receipt');

        $receipts = $finderReceipts->find($finalword);

        $pagination = $paginator->paginate(
            $receipts,
            $this->get('request')->query->get('page1', 1) /*page number*/,
            $paginate_by_page
        );

        $vide = false;
        if (empty($receipts))
            $vide = true;

        return $this->render('EzapReceiptBundle:Receipt:searchpage.html.twig',
            array(
                'receipts' => $pagination,
                'vide' => $vide,
                'keywords' => $finalword,
            )
        );
    }


    /**
     * Search Action in Main
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function searchmainAction()
    {
        $request = $this->getRequest();
        $paginator = $this->get('knp_paginator');
        $paginate_by_page = 5;
        $word_arg = $request->query->get('word');
        $receipts = array();
        $finalword = null;


        if (!empty($word_arg))
            $finalword = $word_arg;

        /**
         * Finders
         */
        $finderReceipts = $this->container->get('fos_elastica.finder.website.receipt');

        $receipts = $finderReceipts->find($finalword);

        $pagination = $paginator->paginate(
            $receipts,
            $this->get('request')->query->get('page1', 1) /*page number*/,
            $paginate_by_page
        );

        $vide = false;
        if (empty($receipts))
            $vide = true;

        return $this->render('EzapReceiptBundle:Receipt:search.html.twig',
            array(
                'receipts' => $pagination,
                'vide' => $vide,
                'keywords' => $finalword,
            )
        );
    }



    /**
     * Export Receipt
     * @param Request $request
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function exportAction(Receipt $id, $type="I")
    {
        $pdfObj = $this->get("white_october.tcpdf")->create();
        $type = $this->getRequest()->query->get('type', 'I');
        // set document information
        $pdfObj->SetCreator(PDF_CREATOR);
        $pdfObj->SetAuthor('Ezap Solution');
        $pdfObj->SetTitle('Facture ');
        $pdfObj->SetSubject('Facture');
        $pdfObj->SetKeywords('Facture, Ezap Solution');

// set default header data
// remove default header/footer
        $pdfObj->setPrintHeader(false);
        $pdfObj->setPrintFooter(false);

// set default monospaced font
        $pdfObj->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);

// set margins
        $pdfObj->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);
        $pdfObj->SetHeaderMargin(PDF_MARGIN_HEADER);
        $pdfObj->SetFooterMargin(PDF_MARGIN_FOOTER);

// set auto page breaks
        $pdfObj->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);

// set image scale factor
        $pdfObj->setImageScale(PDF_IMAGE_SCALE_RATIO);

        $pdfObj->SetFont('dejavusans', '', 14, '', true);

        $pdfObj->AddPage();
// ---------------------------------------------------------

// set default font subsetting mode
        $pdfObj->setFontSubsetting(true);

// set text shadow effect
        $pdfObj->setTextShadow(array('enabled' => true, 'depth_w' => 0.2, 'depth_h' => 0.2, 'color' => array(196, 196, 196), 'opacity' => 1, 'blend_mode' => 'Normal'));

// Set some content to print
        $html = $this->renderView('EzapReceiptBundle:Receipt:export.html.twig', array('receipt' => $id));


// Print text using writeHTMLCell()
        $pdfObj->writeHTMLCell(0, 0, '', '', $html, 0, 1, 0, true, '', true);


// ---------------------------------------------------------

// Close and output PDF document
// This method has several options, check the source code documentation for more information.
        $path = $this->get('kernel')->getRootDir() . '/../web';

        $pdfObj->Output('ezap_receipt.pdf', $type);
    }


    /**
     * Load Scan
     * @param Request $request
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function scanAction(Request $request)
    {
        $date = "Non trouvÃ©";
        $results2 = array();
        $results = array();
        $nb = "Non trouvÃ©";
        $date_achat = null;


        if ($request->getMethod() == 'POST'){

            $fichier = $request->files->get('photo');
            if(empty($fichier)){
                return $this->render('EzapPublicBundle:Main:index.html.twig', array('success' => true, "img"=> 'uploads/'.$nom, "date" => $date, "nombre" => $nb));
            }
            $nom = $fichier->getClientOriginalName();
            $fichier->move('uploads/',$nom);

            shell_exec("convert  -negate    uploads/".$nom." uploads/".$nom."");
            shell_exec("tesseract uploads/".$nom." uploads/photo -l fra");
            $handle = @fopen("uploads/photo.txt", "r+");


            if ($handle) {
                while (($buffer = fgets($handle, 4096)) !== false) {
                    $chaine =  $buffer;
                    $tab = explode(" ",$chaine);
                    foreach($tab as $elt){
                        preg_match("/^(?:0\.(?:0[1-9]|[1-9]\d)|[1-9]\d?\.\d\d)$/", $elt, $matches);
                        if(isset($matches[0])){
                            $price  =  $matches[0];
                            $results[] = $price;
                        }
                    }
                }
            }
            asort($results);
            $results = array_unique($results);
            //print_r($results);
            $nb = end($results);

            rewind($handle);


            if ($handle) {
                while (($buffer = fgets($handle, 4096)) !== false) {
                    $chaine =  $buffer;
                    $tab = explode(" ",$chaine);
                    foreach($tab as $elt){
                        preg_match("^\d{1,2}/\d{2}/\d{4}^",$elt, $matches);
                        if(isset($matches[0]) && strlen($matches[0]) == 10){
                            $date  =  $matches[0];
                        }

                        preg_match("^\d{1,2}/\d{2}/\d{2}^",$elt, $matches);
                        if(isset($matches[0]) && strlen($matches[0]) == 8){
                            $date  =  $matches[0];
                        }

                        preg_match("^\d{1,2}.\d{2}.\d{2}^",$elt, $matches);
                        if(isset($matches[0]) && strlen($matches[0]) == 8){
                            $date  =  $matches[0];
                        }

                        if(empty($results2)){
                            preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$elt, $matches);
                            if(isset($matches[0]) && strlen($matches[0]) == 10){
                                $date  =  $matches[0];
                            }
                        }

                        if(empty($results2)){
                            preg_match("/^(0[1-9]|[1-2][0-9]|3[0-1])-(0[1-9]|1[0-2])-[0-9]{4}$/",$elt, $matches);
                            if(isset($matches[0]) && strlen($matches[0]) == 10){
                                $date  =  $matches[0];
                            }
                        }

                    }
                }

                fclose($handle);
            }
        }

        return $this->render('EzapPublicBundle:Main:index.html.twig', array('success' => true, "img"=> 'uploads/'.$nom, "date" => $date, "nombre" => $nb));
    }

    /**
     * Creates a new Receipt entity.
     *
     */
    public function createAction(Request $request)
    {
        $user = $this->get('security.context')->getToken()->getUser();

        $entity = new Receipt();
        $entity->setUser($user);
        $form = $this->createCreateForm($entity);
        $form->handleRequest($request);

        if ($form->isValid()) {
            $em = $this->getDoctrine()->getManager();
            $em->persist($entity);
            $em->flush();

            return $this->redirect($this->generateUrl('receipt_show', array('id' => $entity->getId())));
        }

        return $this->render('EzapReceiptBundle:Receipt:new.html.twig', array(
            'entity' => $entity,
            'form'   => $form->createView(),
        ));
    }

    /**
    * Creates a form to create a Receipt entity.
    *
    * @param Receipt $entity The entity
    *
    * @return \Symfony\Component\Form\Form The form
    */
    private function createCreateForm(Receipt $entity)
    {
        $form = $this->createForm(new ReceiptType(), $entity, array(
            'action' => $this->generateUrl('receipt_create'),
            'method' => 'POST',
        ));

        $form->add('submit', 'submit', array('label' => 'Create', 'attr' => array('class' => "btn btn-success")));

        return $form;
    }

    /**
     * Displays a form to create a new Receipt entity.
     *
     */
    public function newAction()
    {
        $entity = new Receipt();
        $form   = $this->createCreateForm($entity);

        return $this->render('EzapReceiptBundle:Receipt:new.html.twig', array(
            'entity' => $entity,
            'form'   => $form->createView(),
        ));
    }

    /**
     * Finds and displays a Receipt entity.
     *
     */
    public function showAction($id)
    {
        $em = $this->getDoctrine()->getManager();

        $entity = $em->getRepository('EzapReceiptBundle:Receipt')->find($id);

        if (!$entity) {
            throw $this->createNotFoundException('Unable to find Receipt entity.');
        }

        $deleteForm = $this->createDeleteForm($id);

        return $this->render('EzapReceiptBundle:Receipt:show.html.twig', array(
            'entity'      => $entity,
            'delete_form' => $deleteForm->createView(),        ));
    }

    /**
     * Displays a form to edit an existing Receipt entity.
     *
     */
    public function editAction($id)
    {
        $em = $this->getDoctrine()->getManager();

        $entity = $em->getRepository('EzapReceiptBundle:Receipt')->find($id);

        if (!$entity) {
            throw $this->createNotFoundException('Unable to find Receipt entity.');
        }

        $editForm = $this->createEditForm($entity);
        $deleteForm = $this->createDeleteForm($id);

        return $this->render('EzapReceiptBundle:Receipt:edit.html.twig', array(
            'entity'      => $entity,
            'edit_form'   => $editForm->createView(),
            'delete_form' => $deleteForm->createView(),
        ));
    }

    /**
    * Creates a form to edit a Receipt entity.
    *
    * @param Receipt $entity The entity
    *
    * @return \Symfony\Component\Form\Form The form
    */
    private function createEditForm(Receipt $entity)
    {
        $form = $this->createForm(new ReceiptType(), $entity, array(
            'action' => $this->generateUrl('receipt_update', array('id' => $entity->getId())),
            'method' => 'PUT',
        ));

        $form->add('submit', 'submit', array('label' => 'Update', 'attr' => array('class' => "btn btn-success")));

        return $form;
    }
    /**
     * Edits an existing Receipt entity.
     *
     */
    public function updateAction(Request $request, $id)
    {
        $em = $this->getDoctrine()->getManager();

        $entity = $em->getRepository('EzapReceiptBundle:Receipt')->find($id);

        if (!$entity) {
            throw $this->createNotFoundException('Unable to find Receipt entity.');
        }

        $deleteForm = $this->createDeleteForm($id);
        $editForm = $this->createEditForm($entity);
        $editForm->handleRequest($request);

        if ($editForm->isValid()) {
            $em->flush();

            return $this->redirect($this->generateUrl('receipt_edit', array('id' => $id)));
        }

        return $this->render('EzapReceiptBundle:Receipt:edit.html.twig', array(
            'entity'      => $entity,
            'edit_form'   => $editForm->createView(),
            'delete_form' => $deleteForm->createView(),
        ));
    }
    /**
     * Deletes a Receipt entity.
     *
     */
    public function deleteAction(Request $request, $id)
    {
        $form = $this->createDeleteForm($id);
        $form->handleRequest($request);

        if ($form->isValid()) {
            $em = $this->getDoctrine()->getManager();
            $entity = $em->getRepository('EzapReceiptBundle:Receipt')->find($id);

            if (!$entity) {
                throw $this->createNotFoundException('Unable to find Receipt entity.');
            }

            $em->remove($entity);
            $em->flush();
        }

        return $this->redirect($this->generateUrl('receipt'));
    }

    /**
     * Creates a form to delete a Receipt entity by id.
     *
     * @param mixed $id The entity id
     *
     * @return \Symfony\Component\Form\Form The form
     */
    private function createDeleteForm($id)
    {
        return $this->createFormBuilder()
            ->setAction($this->generateUrl('receipt_delete', array('id' => $id)))
            ->setMethod('DELETE')
            ->add('submit', 'submit', array('label' => 'Delete'))
            ->getForm()
        ;
    }
}

